<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:attachs="clr-namespace:AakStudio.Shell.UI.Themes.AvalonDock.Attachs"
    xmlns:avalonDockControls="clr-namespace:AvalonDock.Controls;assembly=AvalonDock"
    xmlns:avalonDockConverters="clr-namespace:AvalonDock.Converters;assembly=AvalonDock"
    xmlns:avalonDockProperties="clr-namespace:AvalonDock.Properties;assembly=AvalonDock"
    xmlns:controlz="urn:controlzex"
    xmlns:ctrls="clr-namespace:AakStudio.Shell.UI.Themes.AvalonDock.Controls"
    xmlns:reskeys="clr-namespace:AakStudio.Shell.UI.Themes.AvalonDock.Themes"
    xmlns:shell="clr-namespace:Microsoft.Windows.Shell;assembly=AvalonDock">

    <PathGeometry x:Key="Path_ToolWellWindow_Menu" Figures="M 352.041,32.0005L 320,0.000162761L 384,0.000162761L 352.041,32.0005 Z " />
    <PathGeometry x:Key="Path_ToolWellWindow_Maximize" Figures="M0,0L0,9 9,9 9,0 0,0 0,3 8,3 8,8 1,8 1,3 0,3z" />
    <PathGeometry x:Key="Path_ToolWellWindow_Restore" Figures="M0,10L0,3 3,3 3,0 10,0 10,2 4,2 4,3 7,3 7,6 6,6 6,5 1,5 1,10z M1,10L7,10 7,7 10,7 10,2 9,2 9,6 6,6 6,9 1,9z" />
    <PathGeometry x:Key="Path_ToolWellWindow_Close" Figures="M 0,2.0345e-005L 7.62109,2.0345e-005L 19.2627,12.0551L 30.9043,2.0345e-005L 38.5241,2.0345e-005L 23.0726,16.0003L 38.5234,32L 30.9023,32L 19.2621,19.9462L 7.62177,32L 0.00195313,32L 15.4521,16.001L 0,2.0345e-005 Z" />

    <Style x:Key="ToolWellWindowBaseStyle" TargetType="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}">
        <Setter Property="attachs:WindowChromeAttach.EnableMinimize" Value="{Binding RelativeSource={RelativeSource Self}, Path=AllowMinimize}" />
        <Setter Property="attachs:CustomizeGlowWindowAttach.GlowBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.FloatingToolWindowBorder}}" />
        <Setter Property="attachs:CustomizeGlowWindowAttach.NonActiveGlowBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.FloatingToolWindowBorderInactive}}" />
        <Setter Property="attachs:CustomizeGlowWindowAttach.IsActive" Value="{Binding RelativeSource={RelativeSource Self}, Path=IsActive}" />
        <Setter Property="shell:WindowChrome.WindowChrome" Value="{x:Null}" />
        <Setter Property="WindowChrome.WindowChrome" Value="{x:Null}" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.FloatingToolWindowBackground}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}">
                    <ControlTemplate.Resources>
                        <DrawingBrush
                            x:Key="ActivedDragHandleDrawingBrush"
                            TileMode="Tile"
                            Viewbox="0,0,4,4"
                            ViewboxUnits="Absolute"
                            Viewport="0,0,4,4"
                            ViewportUnits="Absolute">
                            <DrawingBrush.Drawing>
                                <GeometryDrawing Brush="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionActiveGrip}}">
                                    <GeometryDrawing.Geometry>
                                        <GeometryGroup>
                                            <GeometryGroup.Children>
                                                <RectangleGeometry Rect="0,0,1,1" />
                                                <RectangleGeometry Rect="2,2,1,1" />
                                            </GeometryGroup.Children>
                                        </GeometryGroup>
                                    </GeometryDrawing.Geometry>
                                </GeometryDrawing>
                            </DrawingBrush.Drawing>
                        </DrawingBrush>

                        <DrawingBrush
                            x:Key="UnActivedDragHandleDrawingBrush"
                            TileMode="Tile"
                            Viewbox="0,0,4,4"
                            ViewboxUnits="Absolute"
                            Viewport="0,0,4,4"
                            ViewportUnits="Absolute">
                            <DrawingBrush.Drawing>
                                <GeometryDrawing Brush="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionInactiveGrip}}">
                                    <GeometryDrawing.Geometry>
                                        <GeometryGroup>
                                            <GeometryGroup.Children>
                                                <RectangleGeometry Rect="0,0,1,1" />
                                                <RectangleGeometry Rect="2,2,1,1" />
                                            </GeometryGroup.Children>
                                        </GeometryGroup>
                                    </GeometryDrawing.Geometry>
                                </GeometryDrawing>
                            </DrawingBrush.Drawing>
                        </DrawingBrush>

                        <Style x:Key="ToolWellWindowSystemButtonBaseStyle" TargetType="{x:Type ButtonBase}">
                            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="BorderThickness" Value="1" />
                            <Setter Property="BorderBrush" Value="Transparent" />
                            <Setter Property="Focusable" Value="false" />
                            <Setter Property="HorizontalContentAlignment" Value="Center" />
                            <Setter Property="VerticalContentAlignment" Value="Center" />
                            <Setter Property="Padding" Value="0" />
                            <Setter Property="Height" Value="16" />
                            <Setter Property="Width" Value="16" />
                            <Setter Property="HorizontalAlignment" Value="Center" />
                            <Setter Property="VerticalAlignment" Value="Center" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonInactiveGlyph}}" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ButtonBase}">
                                        <Border
                                            x:Name="border"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            SnapsToDevicePixels="true">
                                            <ContentPresenter
                                                x:Name="contentPresenter"
                                                Margin="{TemplateBinding Padding}"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                Focusable="false"
                                                RecognizesAccessKey="true"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="controlz:NonClientControlProperties.IsNCMouseOver" Value="true">
                                                <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonInactiveHoveredBackground}}" />
                                                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonInactiveHoveredBorder}}" />
                                                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonInactiveHoveredGlyph}}" />
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="true">
                                                <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonInactiveHoveredBackground}}" />
                                                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonInactiveHoveredBorder}}" />
                                                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonInactiveHoveredGlyph}}" />
                                            </Trigger>
                                            <Trigger Property="controlz:NonClientControlProperties.IsNCPressed" Value="true">
                                                <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonInactivePressedBackground}}" />
                                                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonInactivePressedBorder}}" />
                                                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonInactivePressedGlyph}}" />
                                            </Trigger>
                                            <Trigger Property="IsPressed" Value="true">
                                                <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonActivePressedBackground}}" />
                                                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonActivePressedBorder}}" />
                                                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonActivePressedGlyph}}" />
                                            </Trigger>
                                            <DataTrigger Binding="{Binding Path=Model.SinglePane.SelectedContent.IsActive, RelativeSource={RelativeSource AncestorType={x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}}}" Value="true">
                                                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonActiveGlyph}}" />
                                            </DataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Path=Model.SinglePane.SelectedContent.IsActive, RelativeSource={RelativeSource AncestorType={x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}}}" Value="true" />
                                                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                                </MultiDataTrigger.Conditions>
                                                <MultiDataTrigger.Setters>
                                                    <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonActiveHoveredBackground}}" />
                                                    <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonActiveHoveredBorder}}" />
                                                    <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonActiveHoveredGlyph}}" />
                                                </MultiDataTrigger.Setters>
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Path=Model.SinglePane.SelectedContent.IsActive, RelativeSource={RelativeSource AncestorType={x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}}}" Value="true" />
                                                    <Condition Binding="{Binding Path=(controlz:NonClientControlProperties.IsNCMouseOver), RelativeSource={RelativeSource Self}}" Value="true" />
                                                </MultiDataTrigger.Conditions>
                                                <MultiDataTrigger.Setters>
                                                    <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonActiveHoveredBackground}}" />
                                                    <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonActiveHoveredBorder}}" />
                                                    <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonActiveHoveredGlyph}}" />
                                                </MultiDataTrigger.Setters>
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Path=Model.SinglePane.SelectedContent.IsActive, RelativeSource={RelativeSource AncestorType={x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}}}" Value="true" />
                                                    <Condition Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                                </MultiDataTrigger.Conditions>
                                                <MultiDataTrigger.Setters>
                                                    <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonActivePressedBackground}}" />
                                                    <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonActivePressedBorder}}" />
                                                    <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonActivePressedGlyph}}" />
                                                </MultiDataTrigger.Setters>
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Path=Model.SinglePane.SelectedContent.IsActive, RelativeSource={RelativeSource AncestorType={x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}}}" Value="true" />
                                                    <Condition Binding="{Binding Path=(controlz:NonClientControlProperties.IsNCPressed), RelativeSource={RelativeSource Self}}" Value="true" />
                                                </MultiDataTrigger.Conditions>
                                                <MultiDataTrigger.Setters>
                                                    <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonActivePressedBackground}}" />
                                                    <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonActivePressedBorder}}" />
                                                    <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonActivePressedGlyph}}" />
                                                </MultiDataTrigger.Setters>
                                            </MultiDataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>

                        <Style
                            x:Key="ToolWellWindowdDropDownButtonBaseStyle"
                            BasedOn="{StaticResource ToolWellWindowSystemButtonBaseStyle}"
                            TargetType="{x:Type avalonDockControls:DropDownButton}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}" Value="true">
                                    <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonInactivePressedBackground}}" />
                                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonInactivePressedBorder}}" />
                                    <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonInactivePressedGlyph}}" />
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=Model.SinglePane.SelectedContent.IsActive, RelativeSource={RelativeSource AncestorType={x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}}}" Value="true" />
                                        <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}" Value="true" />
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonActivePressedBackground}}" />
                                        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonActivePressedBorder}}" />
                                        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonActivePressedGlyph}}" />
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border
                            x:Name="WindowBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" MinHeight="21" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                <ctrls:CustomizeTitleBar
                                    ContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                    ContextMenuDataContext="{Binding Path=SingleContentLayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
                                    IsShowSystemMenu="{Binding Path=Model.Root.Manager.ShowSystemMenu, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                                    <Border
                                        x:Name="Header"
                                        Padding="3,3,4,4"
                                        Background="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionInactiveBackground}}"
                                        TextElement.Foreground="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionInactiveText}}">
                                        <Grid UseLayoutRounding="true">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*" />
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="Auto" />
                                            </Grid.ColumnDefinitions>
                                            <DockPanel>
                                                <Border
                                                    Padding="2,0,4,0"
                                                    HorizontalAlignment="Left"
                                                    Visibility="{Binding Path=Model.IsSinglePane, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                                                    <ContentPresenter
                                                        Content="{Binding Model.SinglePane.SelectedContent, RelativeSource={RelativeSource TemplatedParent}}"
                                                        ContentTemplate="{Binding Model.Root.Manager.AnchorableTitleTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                                        ContentTemplateSelector="{Binding Model.Root.Manager.AnchorableTitleTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
                                                </Border>
                                                <Rectangle
                                                    x:Name="DragHandleTexture"
                                                    Height="5"
                                                    Margin="4,0,4,0"
                                                    VerticalAlignment="Center"
                                                    RenderOptions.BitmapScalingMode="NearestNeighbor"
                                                    UseLayoutRounding="true" />
                                            </DockPanel>

                                            <avalonDockControls:DropDownButton
                                                x:Name="SinglePaneContextMenu"
                                                Grid.Column="1"
                                                Margin="1,1,1,0"
                                                controlz:NonClientControlProperties.ClickStrategy="MouseEvent"
                                                controlz:NonClientControlProperties.HitTestResult="MENU"
                                                controlz:WindowChrome.IsHitTestVisibleInChrome="true"
                                                DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                                DropDownContextMenuDataContext="{Binding Path=SingleContentLayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
                                                Style="{StaticResource ToolWellWindowdDropDownButtonBaseStyle}"
                                                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_CxMenu_Hint}"
                                                Visibility="{Binding Path=Model.IsSinglePane, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                                                <Path
                                                    Width="8"
                                                    Height="8"
                                                    Data="{DynamicResource Path_ToolWellWindow_Menu}"
                                                    Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"
                                                    Stretch="Uniform" />
                                            </avalonDockControls:DropDownButton>

                                            <Button
                                                x:Name="PART_PinMaximize"
                                                Grid.Column="2"
                                                Margin="0,1,1,0"
                                                controlz:NonClientControlProperties.ClickStrategy="AutomationPeer"
                                                controlz:NonClientControlProperties.HitTestResult="MAXBUTTON"
                                                Command="{x:Static shell:SystemCommands.MaximizeWindowCommand}"
                                                CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                                Style="{StaticResource ToolWellWindowSystemButtonBaseStyle}"
                                                ToolTip="{x:Static avalonDockProperties:Resources.Window_Maximize}"
                                                Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:InverseBoolToVisibilityConverter}}">
                                                <Path
                                                    Width="9"
                                                    Height="9"
                                                    Margin="1,1,0,0"
                                                    Data="{DynamicResource Path_ToolWellWindow_Maximize}"
                                                    Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"
                                                    Stretch="Uniform" />
                                            </Button>

                                            <Button
                                                x:Name="PART_PinRestore"
                                                Grid.Column="2"
                                                Margin="0,1,1,0"
                                                controlz:NonClientControlProperties.ClickStrategy="AutomationPeer"
                                                controlz:NonClientControlProperties.HitTestResult="MAXBUTTON"
                                                Command="{x:Static shell:SystemCommands.RestoreWindowCommand}"
                                                CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                                Style="{StaticResource ToolWellWindowSystemButtonBaseStyle}"
                                                ToolTip="{x:Static avalonDockProperties:Resources.Window_Restore}"
                                                Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                                                <Path
                                                    Width="10"
                                                    Height="10"
                                                    Data="{DynamicResource Path_ToolWellWindow_Restore}"
                                                    Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"
                                                    Stretch="Uniform" />
                                            </Button>

                                            <Button
                                                x:Name="PART_PinClose"
                                                Grid.Column="3"
                                                Margin="0,1,1,0"
                                                controlz:NonClientControlProperties.ClickStrategy="AutomationPeer"
                                                controlz:NonClientControlProperties.HitTestResult="CLOSE"
                                                Command="{Binding HideWindowCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                                Style="{StaticResource ToolWellWindowSystemButtonBaseStyle}"
                                                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}"
                                                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                                                <Path
                                                    Width="10"
                                                    Height="10"
                                                    Data="{DynamicResource Path_ToolWellWindow_Close}"
                                                    Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"
                                                    Stretch="Uniform" />
                                            </Button>
                                        </Grid>
                                    </Border>
                                </ctrls:CustomizeTitleBar>
                                <ContentPresenter Grid.Row="1" Content="{TemplateBinding Content}" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SinglePane.SelectedContent.IsActive}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="DragHandleTexture" Property="Fill" Value="{StaticResource UnActivedDragHandleDrawingBrush}" />
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SinglePane.SelectedContent.IsActive}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="Header" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionActiveBackground}}" />
                                <Setter TargetName="Header" Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionActiveText}}" />
                                <Setter TargetName="DragHandleTexture" Property="Fill" Value="{StaticResource ActivedDragHandleDrawingBrush}" />
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding Model.SinglePane.SelectedContent.CanClose, RelativeSource={RelativeSource Mode=Self}}" Value="true">
                            <Setter TargetName="PART_PinClose" Property="Command" Value="{Binding CloseWindowCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="PART_PinClose" Property="ToolTip" Value="{x:Static avalonDockProperties:Resources.Document_Close}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>