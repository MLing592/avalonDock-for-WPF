<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:attachs="clr-namespace:AakStudio.Shell.UI.Themes.AvalonDock.Attachs"
    xmlns:avalonDockControls="clr-namespace:AvalonDock.Controls;assembly=AvalonDock"
    xmlns:avalonDockConverters="clr-namespace:AvalonDock.Converters;assembly=AvalonDock"
    xmlns:avalonDockProperties="clr-namespace:AvalonDock.Properties;assembly=AvalonDock"
    xmlns:controlz="urn:controlzex"
    xmlns:reskeys="clr-namespace:AakStudio.Shell.UI.Themes.AvalonDock.Themes"
    xmlns:shell="clr-namespace:Microsoft.Windows.Shell;assembly=AvalonDock">

    <PathGeometry x:Key="Path_DocumentWellWindow_Close" Figures="M7.116 8l-4.558 4.558.884.884L8 8.884l4.558 4.558.884-.884L8.884 8l4.558-4.558-.884-.884L8 7.116 3.442 2.558l-.884.884L7.116 8z" />
    <PathGeometry x:Key="Path_DocumentWellWindow_Restore" Figures="M3 5v9h9V5H3zm8 8H4V6h7v7z M5 5h1V4h7v7h-1v1h2V3H5v2z" />
    <PathGeometry x:Key="Path_DocumentWellWindow_Maximize" Figures="M3 3v10h10V3H3zm9 9H4V4h8v8z" />
    <PathGeometry x:Key="Path_DocumentWellWindow_Minimize" Figures="M14 8v1H3V8h11z" />

    <Style x:Key="DocumentWellWindowBaseStyle" TargetType="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}">
        <Setter Property="attachs:WindowChromeAttach.EnableMinimize" Value="{Binding RelativeSource={RelativeSource Self}, Path=AllowMinimize}" />
        <!--
            Use the customize active glow window, Because this will show the active color when displayed.
            Bacause GlowWindowAttach can't do that (The activated color is shown for the first time).
            
            Displaying a floating window when dragged from a pane.
            (The floating window display without notifying the activation event?)
            But it will work in MainWindow (GlowWindowAttach) (no drag)
        -->
        <Setter Property="attachs:CustomizeGlowWindowAttach.IsActive" Value="{Binding RelativeSource={RelativeSource Self}, Path=IsActive}" />
        <Setter Property="attachs:CustomizeGlowWindowAttach.GlowBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.FloatingDocumentWindowBorder}}" />
        <Setter Property="attachs:CustomizeGlowWindowAttach.NonActiveGlowBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.FloatingDocumentWindowBorderInactive}}" />
        <Setter Property="shell:WindowChrome.WindowChrome" Value="{x:Null}" />
        <Setter Property="WindowChrome.WindowChrome" Value="{x:Null}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.FloatingDocumentWindowBackground}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}">
                    <ControlTemplate.Resources>
                        <Style x:Key="DocumentFloatingWindowSystemButton" TargetType="{x:Type Button}">
                            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="BorderThickness" Value="1" />
                            <Setter Property="BorderBrush" Value="Transparent" />
                            <Setter Property="Width" Value="34" />
                            <Setter Property="Height" Value="26" />
                            <Setter Property="Focusable" Value="false" />
                            <Setter Property="VerticalAlignment" Value="Top" />
                            <Setter Property="VerticalContentAlignment" Value="Center" />
                            <Setter Property="HorizontalAlignment" Value="Center" />
                            <Setter Property="HorizontalContentAlignment" Value="Center" />
                            <Setter Property="Padding" Value="0" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentFloatingWindowSystemButtonGlyph}}" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ButtonBase}">
                                        <Border
                                            x:Name="border"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            SnapsToDevicePixels="true">
                                            <ContentPresenter
                                                x:Name="contentPresenter"
                                                Margin="{TemplateBinding Padding}"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                Focusable="false"
                                                RecognizesAccessKey="true"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="controlz:NonClientControlProperties.IsNCMouseOver" Value="true">
                                                <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentFloatingWindowSystemButtonBackgroundHover}}" />
                                                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentFloatingWindowSystemButtonBorderHover}}" />
                                                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentFloatingWindowSystemButtonGlyphHover}}" />
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="true">
                                                <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentFloatingWindowSystemButtonBackgroundHover}}" />
                                                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentFloatingWindowSystemButtonBorderHover}}" />
                                                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentFloatingWindowSystemButtonGlyphHover}}" />
                                            </Trigger>
                                            <Trigger Property="controlz:NonClientControlProperties.IsNCPressed" Value="true">
                                                <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentFloatingWindowSystemButtonBackgroundPressed}}" />
                                                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentFloatingWindowSystemButtonBorderPressed}}" />
                                                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentFloatingWindowSystemButtonGlyphPressed}}" />
                                            </Trigger>
                                            <Trigger Property="IsPressed" Value="true">
                                                <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentFloatingWindowSystemButtonBackgroundPressed}}" />
                                                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentFloatingWindowSystemButtonBorderPressed}}" />
                                                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentFloatingWindowSystemButtonGlyphPressed}}" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>
                    <Border
                        x:Name="WindowBorder"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border
                                x:Name="Header"
                                controlz:NonClientControlProperties.HitTestResult="CAPTION"
                                Background="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentFloatingWindowTitleBarBackground}}"
                                TextElement.Foreground="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentFloatingWindowTitleBarTextActive}}">
                                <Grid UseLayoutRounding="true">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter
                                        x:Name="HeaderContent"
                                        Margin="12,4,12,0"
                                        Content="{Binding Model.SinglePane.SelectedContent, RelativeSource={RelativeSource TemplatedParent}}"
                                        ContentTemplate="{Binding Model.Root.Manager.DocumentTitleTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                        ContentTemplateSelector="{Binding Model.Root.Manager.DocumentTitleTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                        TextElement.Foreground="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentFloatingWindowTitleBarText}}" />
                                    <Button
                                        x:Name="PART_PinMinimize"
                                        Grid.Column="1"
                                        controlz:NonClientControlProperties.ClickStrategy="AutomationPeer"
                                        controlz:NonClientControlProperties.HitTestResult="MINBUTTON"
                                        Command="{x:Static shell:SystemCommands.MinimizeWindowCommand}"
                                        CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                        Style="{StaticResource DocumentFloatingWindowSystemButton}"
                                        ToolTip="{x:Static avalonDockProperties:Resources.Window_Maximize}"
                                        Visibility="{Binding Path=AllowMinimize, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                                        <Path
                                            Width="9"
                                            Height="9"
                                            Data="{DynamicResource Path_DocumentWellWindow_Minimize}"
                                            Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"
                                            RenderOptions.EdgeMode="Aliased"
                                            Stretch="Uniform" />
                                    </Button>
                                    <Button
                                        x:Name="PART_PinMaximize"
                                        Grid.Column="2"
                                        controlz:NonClientControlProperties.ClickStrategy="AutomationPeer"
                                        controlz:NonClientControlProperties.HitTestResult="MAXBUTTON"
                                        Command="{x:Static shell:SystemCommands.MaximizeWindowCommand}"
                                        CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                        Style="{StaticResource DocumentFloatingWindowSystemButton}"
                                        ToolTip="{x:Static avalonDockProperties:Resources.Window_Maximize}"
                                        Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:InverseBoolToVisibilityConverter}}">
                                        <Path
                                            Width="9"
                                            Height="9"
                                            Data="{DynamicResource Path_DocumentWellWindow_Maximize}"
                                            Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"
                                            RenderOptions.EdgeMode="Aliased"
                                            Stretch="Uniform" />
                                    </Button>
                                    <Button
                                        x:Name="PART_PinRestore"
                                        Grid.Column="2"
                                        controlz:NonClientControlProperties.ClickStrategy="AutomationPeer"
                                        controlz:NonClientControlProperties.HitTestResult="MAXBUTTON"
                                        Command="{x:Static shell:SystemCommands.RestoreWindowCommand}"
                                        CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                        Style="{StaticResource DocumentFloatingWindowSystemButton}"
                                        ToolTip="{x:Static avalonDockProperties:Resources.Window_Restore}"
                                        Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                                        <Path
                                            Width="10"
                                            Height="10"
                                            Data="{DynamicResource Path_DocumentWellWindow_Restore}"
                                            Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"
                                            Stretch="Uniform" />
                                    </Button>
                                    <Button
                                        x:Name="PART_PinClose"
                                        Grid.Column="3"
                                        controlz:NonClientControlProperties.ClickStrategy="AutomationPeer"
                                        controlz:NonClientControlProperties.HitTestResult="CLOSE"
                                        Command="{Binding Path=CloseWindowCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                        Style="{StaticResource DocumentFloatingWindowSystemButton}"
                                        ToolTip="{x:Static avalonDockProperties:Resources.Document_Close}"
                                        Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                                        <Path
                                            Width="10"
                                            Height="10"
                                            Data="{DynamicResource Path_DocumentWellWindow_Close}"
                                            Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"
                                            Stretch="Uniform" />
                                    </Button>
                                </Grid>
                            </Border>
                            <ContentPresenter
                                Grid.Row="2"
                                Margin="6"
                                Content="{TemplateBinding Content}"
                                Tag="{Binding RelativeSource={RelativeSource TemplatedParent}}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="Header" Property="Padding" Value="0,0,0,6" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsActive}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="HeaderContent" Property="TextElement.Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentFloatingWindowTitleBarTextActive}}" />
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}"
        BasedOn="{StaticResource DocumentWellWindowBaseStyle}"
        TargetType="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}" />

</ResourceDictionary>